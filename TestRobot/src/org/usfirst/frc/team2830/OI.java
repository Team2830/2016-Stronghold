// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc.team2830;

import org.usfirst.frc.team2830.commands.*;
import org.usfirst.frc.team2830.triggers.ElevatorTrigger;
import org.usfirst.frc.team2830.triggers.ElevatorWinchTrigger;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton buttonRB;
    public JoystickButton  ButtonLB;
    public JoystickButton  buttonA;
    public JoystickButton  ButtonARelease;
    public Joystick driverGamepad;
    public JoystickButton button1;
    public JoystickButton button2;
    public JoystickButton button8;
    public JoystickButton button6;
    public JoystickButton button1Released;
    public JoystickButton button2Release;
    public Joystick operatorGamepad;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public  ElevatorTrigger elevatorTrigger;
    public  ElevatorWinchTrigger elevatorWinchTrigger;

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        operatorGamepad = new Joystick(1);
        
        button2Release = new JoystickButton(operatorGamepad, 2);
        button2Release.whenReleased(new IntakeStop());
        button1Released = new JoystickButton(operatorGamepad, 1);
        button1Released.whenReleased(new IntakeStop());
        button6 = new JoystickButton(operatorGamepad, 6);
        button6.whenPressed(new intakeup());
        button8 = new JoystickButton(operatorGamepad, 8);
        button8.whenPressed(new intakedown());
        button2 = new JoystickButton(operatorGamepad, 2);
        button2.whenPressed(new intakein());
        button1 = new JoystickButton(operatorGamepad, 1);
        button1.whileHeld(new intakeout());
        driverGamepad = new Joystick(0);
        
         ButtonARelease = new JoystickButton(driverGamepad, 1);
         ButtonARelease.whenReleased(new IntakeStop());
         buttonA = new JoystickButton(driverGamepad, 1);
         buttonA.whileHeld(new intakeout());
         ButtonLB = new JoystickButton(driverGamepad, 5);
         ButtonLB.whenPressed(new shiftdown());
        buttonRB = new JoystickButton(driverGamepad, 6);
        buttonRB.whenPressed(new shiftup());


        // SmartDashboard Buttons
        SmartDashboard.putData("Intake Stop", new IntakeStop());
        SmartDashboard.putData("Drive Forward", new DriveForward());
        SmartDashboard.putData("Drive Over Rough Terrain", new DriveOverRoughTerrain());
        SmartDashboard.putData("Drive Under Low Bar", new DriveUnderLowBar());
        SmartDashboard.putData("Elevator Winch Lock", new ElevatorWinchLock());
        SmartDashboard.putData("Start Elevator Use", new StartElevatorUse());
        SmartDashboard.putData("Move Elevator Winch", new MoveElevatorWinch());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        elevatorWinchTrigger = new ElevatorWinchTrigger();
        elevatorTrigger = new ElevatorTrigger();

        elevatorTrigger.whenActive(new MoveElevator());
       elevatorWinchTrigger.whenActive(new MoveElevatorWinch());
       
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getDriverGamepad() {
        return driverGamepad;
    }

    public Joystick getOperatorGamepad() {
        return operatorGamepad;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

