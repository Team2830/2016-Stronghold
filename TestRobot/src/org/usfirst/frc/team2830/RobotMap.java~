// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc.team2830;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Victor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveTrainLeftFrontController;
    public static SpeedController driveTrainLeftRearController;
    public static SpeedController driveTrainRightFrontController;
    public static SpeedController driveTrainRightRearController;
    public static RobotDrive driveTrainRobotDrive;
    public static DoubleSolenoid driveTrainLeftShiftingSolenoid;
    public static DoubleSolenoid driveTrainRightShiftingSolenoid;
    public static DoubleSolenoid intakeIntakeSolenoid;
    public static SpeedController intakeIntakeMotor;
    public static CANTalon elevatorElevatorTalon1;
    public static CANTalon elevatorElevatorTalon2;
    public static SpeedController elevatorElevatorWinchController1;
    public static SpeedController elevatorElevatorWinchController2;
    public static DoubleSolenoid elevatorElevatorWinchSolenoid;
    public static DigitalInput elevatorElevatorUpDownLock;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainLeftFrontController = new Victor(0);
        LiveWindow.addActuator("DriveTrain", "LeftFrontController", (Victor) driveTrainLeftFrontController);
        
        driveTrainLeftRearController = new Talon(1);
        LiveWindow.addActuator("DriveTrain", "LeftRearController", (Talon) driveTrainLeftRearController);
        
        driveTrainRightFrontController = new Victor(2);
        LiveWindow.addActuator("DriveTrain", "RightFrontController", (Victor) driveTrainRightFrontController);
        
        driveTrainRightRearController = new Talon(3);
        LiveWindow.addActuator("DriveTrain", "RightRearController", (Talon) driveTrainRightRearController);
        
        driveTrainRobotDrive = new RobotDrive(driveTrainLeftFrontController, driveTrainLeftRearController,
              driveTrainRightFrontController, driveTrainRightRearController);
        
        driveTrainRobotDrive.setSafetyEnabled(true);
        driveTrainRobotDrive.setExpiration(0.1);
        driveTrainRobotDrive.setSensitivity(0.5);
        driveTrainRobotDrive.setMaxOutput(1.0);

        driveTrainLeftShiftingSolenoid = new DoubleSolenoid(0, 0, 1);
        LiveWindow.addActuator("DriveTrain", "Left Shifting Solenoid", driveTrainLeftShiftingSolenoid);
        
        driveTrainRightShiftingSolenoid = new DoubleSolenoid(0, 2, 3);
        LiveWindow.addActuator("DriveTrain", "Right Shifting Solenoid", driveTrainRightShiftingSolenoid);
        
        intakeIntakeSolenoid = new DoubleSolenoid(0, 6, 7);
        LiveWindow.addActuator("Intake", "Intake Solenoid", intakeIntakeSolenoid);
        
        intakeIntakeMotor = new Victor(4);
        LiveWindow.addActuator("Intake", "Intake Motor", (Victor) intakeIntakeMotor);
        
        elevatorElevatorTalon1 = new CANTalon(2);
        LiveWindow.addActuator("Elevator", "Elevator Talon 1", elevatorElevatorTalon1);
        
        elevatorElevatorTalon2 = new CANTalon(3);
        LiveWindow.addActuator("Elevator", "Elevator Talon 2", elevatorElevatorTalon2);
        
        elevatorElevatorWinchController1 = new Victor(5);
        LiveWindow.addActuator("Elevator", "Elevator Winch Controller 1", (Victor) elevatorElevatorWinchController1);
        
        elevatorElevatorWinchController2 = new Victor(6);
        LiveWindow.addActuator("Elevator", "Elevator Winch Controller 2", (Victor) elevatorElevatorWinchController2);
        
        elevatorElevatorWinchSolenoid = new DoubleSolenoid(0, 4, 5);
        LiveWindow.addActuator("Elevator", "Elevator Winch Solenoid", elevatorElevatorWinchSolenoid);
        
        elevatorElevatorUpDownLock = new DigitalInput(6);
        LiveWindow.addSensor("Elevator", "Elevator Up Down Lock", elevatorElevatorUpDownLock);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
    }

}
